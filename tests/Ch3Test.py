import math
import numpy as np
import numpy.testing as npt
import unittest
import sbfem.sbfem as sbfem


class Ch3Test(unittest.TestCase):
    """
    This class contains tests for examples from Chapter3.
    """

    def test_example_3_1(self):
        """
        Example 3.1 Compute the solution of the scaled boundary finite element
        equation for the square S-element in Example 2.4 on page 65.
        Assume the Young’s modulus is equal to E = 10 GPa and Poisson’s ratio ν = 0.
        """
        # Solution of a square S-element
        xy = np.array([[-1, -1], [1, -1], [1, 1], [-1, 1]])
        conn = np.array([[0, 1], [1, 2], [2, 3], [3, 0]])  # [1:4; 2:4 1]’
        # elascity matrix(plane stress).
        mat = sbfem.Material(D=sbfem.elasticityMatrixForPlaneStress(10, 0), den=2)
        E0, E1, E2, M0 = sbfem.coeffMatricesOfSElement(xy, conn, mat)
        K, d, v, M = sbfem.sbfem(E0, E1, E2, M0)

        exp_K = np.array([
            [4.8936, 1.2500, -2.3936, -1.2500, -2.6064, -1.2500, 0.1064, 1.2500],
            [1.2500, 4.8936, 1.2500, 0.1064, -1.2500, -2.6064, -1.2500, -2.3936],
            [-2.3936, 1.2500, 4.8936, -1.2500, 0.1064, -1.2500, -2.6064, 1.2500],
            [-1.2500, 0.1064, -1.2500, 4.8936, 1.2500, -2.3936, 1.2500, -2.6064],
            [-2.6064, -1.2500, 0.1064, 1.2500, 4.8936, 1.2500, -2.3936, -1.2500],
            [-1.2500, -2.6064, -1.2500, -2.3936, 1.2500, 4.8936, 1.2500, 0.1064],
            [0.1064, -1.2500, -2.6064, 1.2500, -2.3936, 1.2500, 4.8936, -1.2500],
            [1.2500, -2.3936, 1.2500, -2.6064, -1.2500, 0.1064, -1.2500, 4.8936]
        ])

        exp_d = np.array([1.915, 1.915, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0])

        exp_v = np.array([
            [-1.0000, -0.1512, -0.3740, 0.4303, 1.0000, 0.3174, 1.0000, 0],
            [0.1741, 0.9923, 0.3444, -0.0109, -0.2360, 1.0000, 0, 1.0000],
            [1.0000, -0.1956, -1.0000, 1.0000, 0.1011, 0.3477, 1.0000, 0],
            [0.1741, -1.0000, -0.0325, 0.3071, 0.2360, -0.9180, 0, 1.0000],
            [-1.0000, -0.1512, 0.3740, -0.4303, -1.0000, -0.3174, 1.0000, 0],
            [0.1741, 0.9923, -0.3444, 0.0109, 0.2360, -1.0000, 0, 1.0000],
            [1.0000, -0.1956, 1.0000, -1.0000, -0.1011, -0.3477, 1.0000, 0],
            [0.1741, -1.0000, 0.0325, -0.3071, -0.2360, 0.9180, 0, 1.0000],
        ])

        exp_M = np.array([
            [0.8954, 0.0851, 0.4380, -0.0000, 0.2287, 0.0851, 0.4380, 0.0000],
            [0.0851, 0.8954, -0.0000, 0.4380, 0.0851, 0.2287, -0.0000, 0.4380],
            [0.4380, 0.0000, 0.8954, -0.0851, 0.4380, -0.0000, 0.2287, -0.0851],
            [-0.0000, 0.4380, -0.0851, 0.8954, -0.0000, 0.4380, -0.0851, 0.2287],
            [0.2287, 0.0851, 0.4380, -0.0000, 0.8954, 0.0851, 0.4380, -0.0000],
            [0.0851, 0.2287, 0.0000, 0.4380, 0.0851, 0.8954, -0.0000, 0.4380],
            [0.4380, -0.0000, 0.2287, -0.0851, 0.4380, 0.0000, 0.8954, -0.0851],
            [0.0000, 0.4380, -0.0851, 0.2287, -0.0000, 0.4380, -0.0851, 0.8954]
        ])

        npt.assert_array_almost_equal(K, exp_K, decimal=4, err_msg=f"Mismatched 'K'")
        npt.assert_array_almost_equal(d, exp_d, decimal=4, err_msg=f"Mismatched 'd'")
        # TODO: check v - it is not equal to value from Matlab code
        # npt.assert_array_almost_equal(v, exp_v, decimal=4, err_msg=f"Mismatched 'v'")
        npt.assert_array_almost_equal(M, exp_M, decimal=4, err_msg=f"Mismatched 'M'")

    def test_example_3_2(self):
        """
        Example 3.2 A regular pentagon S-element is shown in Figure 3.1.
        The vertices are on a circle with a radius of 1 m.
        Each edge is modelled with a 2-node line element.
        The nodal numbers and the line element numbers (in circle) are shown in Figure 3.1.
        The elasticity constants are: Young’s modulus E = 10 GPa and Poison’s ratio ν = 0.
        Consider plane stress states. Use the eigenvalue method to determine the solution of
        the scaled boundary finite element equation of the S-element.
        """
        # Solution of pentagon S-element
        radians = np.deg2rad([(-126 + i*72) for i in range(5)])
        xy = np.array([[math.cos(d), math.sin(d)] for d in radians])
        conn = np.array([[0, 1], [1, 2], [2, 3], [3, 4], [4, 0]])  # [1:5; 2:5 1]'

        # elascity matrix(plane stress).
        mat = sbfem.Material(D=sbfem.elasticityMatrixForPlaneStress(10, 0), den=2)
        E0, E1, E2, M0 = sbfem.coeffMatricesOfSElement(xy, conn, mat)
        K, d, v, M = sbfem.sbfem(E0, E1, E2, M0)

        exp_K = np.array([
            [4.8887, 0.9045, -1.9539, -1.3555, -1.8823, -0.7338, -0.8190, -0.7297, -0.2335, 1.9145],
            [0.9045, 5.4765, 1.3555, -0.0518, -1.0752, -1.2945, -0.3883, -2.3578, -0.7965, -1.7723],
            [-1.9539, 1.3555, 4.8887, -0.9045, -0.2335, -1.9145, -0.8190, 0.7297, -1.8823, 0.7338],
            [-1.3555, -0.0518, -0.9045, 5.4765, 0.7965, -1.7723, 0.3883, -2.3578, 1.0752, -1.2945],
            [-1.8823, -1.0752, -0.2335, 0.7965, 5.9520, 0.5590, -1.2968, -0.4510, -2.5395, 0.1707],
            [-0.7338, -1.2945, -1.9145, -1.7723, 0.5590, 4.4132, 2.2600, -0.7090, -0.1707, -0.6374],
            [-0.8190, -0.3883, -0.8190, 0.3883, -1.2968, 2.2600, 4.2316, -0.0000, -1.2968, -2.2600],
            [-0.7297, -2.3578, 0.7297, -2.3578, -0.4510, -0.7090, -0.0000, 6.1337, 0.4510, -0.7090],
            [-0.2335, -0.7965, -1.8823, 1.0752, -2.5395, -0.1707, -1.2968, 0.4510, 5.9520, -0.5590],
            [1.9145, -1.7723, 0.7338, -1.2945, 0.1707, -0.6374, -2.2600, -0.7090, -0.5590, 4.4132]
        ])

        exp_d = np.array([2.1922, 2.1922, 2.1731, 2.1731, 1.0, 1.0, 1.0, 1.0, 0, 0])

        exp_v = np.array([
            [1.0000, 0.1839, -0.8822, -0.4810, -0.0868, -0.1261, -1.0000, 0.8781, 1.0000, 0],
            [-0.3169, -0.7495, 0.2330, 0.7294, 0.7494, 0.8352, 0.1016, 0.0585, 0, 1.0000],
            [-0.9650, -0.3317, 0.5767, -0.4590, 0.0154, 0.0446, -0.5582, -0.1972, 1.0000, 0],
            [-0.6136, 0.5053, -0.2410, -0.7295, -0.4055, 0.7829, -0.3488, 0.2849, 0, 1.0000],
            [0.1610, 0.6518, -0.3249, 0.3807, 0.0963, 0.1536, 0.6550, -1.0000, 1.0000, 0],
            [0.9478, -0.4567, 1.0000, 0.4637, -1.0000, -0.3513, -0.3172, 0.1176, 0, 1.0000],
            [0.2365, -1.0000, -0.3249, -1.0000, 0.0441, 0.0504, 0.9630, -0.4208, 1.0000, 0],
            [-0.6508, -0.1708, -0.5340, -0.0080, -0.2125, -1.0000, 0.1528, -0.2122, 0, 1.0000],
            [-0.4325, 0.4960, 0.5767, 0.3943, -0.0691, -0.1225, -0.0598, 0.7399, 1.0000, 0],
            [0.6336, 0.8717, 0.7070, -0.4380, 0.8687, -0.2667, 0.4117, -0.2488, 0, 1.0000]
        ])

        exp_M = np.array([
            [0.3694, 0.0658, 0.1803, 0.0035, 0.1027, 0.0380, 0.0514, 0.0327, 0.2008, 0.0032],
            [0.0658, 0.4121, -0.0035, 0.2030, 0.0493, 0.0743, 0.0213, 0.1257, 0.0102, 0.1824],
            [0.1803, -0.0035, 0.3694, -0.0658, 0.2008, -0.0032, 0.0514, -0.0327, 0.1027, -0.0380],
            [0.0035, 0.2030, -0.0658, 0.4121, -0.0102, 0.1824, -0.0213, 0.1257, -0.0493, 0.0743],
            [0.1027, 0.0493, 0.2008, -0.0102, 0.4467, 0.0406, 0.1881, 0.0143, 0.1344, -0.0057],
            [0.0380, 0.0743, -0.0032, 0.1824, 0.0406, 0.3348, 0.0073, 0.1951, 0.0057, 0.0426],
            [0.0514, 0.0213, 0.0514, -0.0213, 0.1881, 0.0073, 0.3216, -0.0000, 0.1881, -0.0073],
            [0.0327, 0.1257, -0.0327, 0.1257, 0.0143, 0.1951, -0.0000, 0.4599, -0.0143, 0.1951],
            [0.2008, 0.0102, 0.1027, -0.0493, 0.1344, 0.0057, 0.1881, -0.0143, 0.4467, -0.0406],
            [0.0032, 0.1824, -0.0380, 0.0743, -0.0057, 0.0426, -0.0073, 0.1951, -0.0406, 0.3348]
        ])

        npt.assert_array_almost_equal(K, exp_K, decimal=4, err_msg=f"Mismatched 'K'")
        npt.assert_array_almost_equal(d, exp_d, decimal=4, err_msg=f"Mismatched 'd'")
        # TODO: check v - it is not equal to value from Matlab code
        # npt.assert_array_almost_equal(v, exp_v, decimal=4, err_msg=f"Mismatched 'v'")
        npt.assert_array_almost_equal(M, exp_M, decimal=4, err_msg=f"Mismatched 'M'")



