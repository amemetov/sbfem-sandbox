import numpy as np
import numpy.testing as npt
import unittest
import sbfem.sbfem as sbfem


class Ch3Test(unittest.TestCase):
    """
    This class contains tests for examples from Chapter3.
    """

    def test_example_3_1(self):
        """
        Example 3.1 Compute the solution of the scaled boundary finite element
        equation for the square S-element in Example 2.4 on page 65.
        Assume the Young’s modulus is equal to E = 10 GPa and Poisson’s ratio ν = 0.
        """
        # Solution of a square S-element
        xy = np.array([[-1, -1], [1, -1], [1, 1], [-1, 1]])
        conn = np.array([[0, 1], [1, 2], [2, 3], [3, 0]])  # [1:4; 2:4 1]’
        # elascity matrix(plane stress).
        mat = sbfem.Material(D=sbfem.elasticityMatrixForPlaneStress(10, 0), den=2)
        E0, E1, E2, M0 = sbfem.coeffMatricesOfSElement(xy, conn, mat)
        K, d, v, M = sbfem.sbfem(E0, E1, E2, M0)

        exp_K = np.array([
            [4.8936, 1.2500, -2.3936, -1.2500, -2.6064, -1.2500, 0.1064, 1.2500],
            [1.2500, 4.8936, 1.2500, 0.1064, -1.2500, -2.6064, -1.2500, -2.3936],
            [-2.3936, 1.2500, 4.8936, -1.2500, 0.1064, -1.2500, -2.6064, 1.2500],
            [-1.2500, 0.1064, -1.2500, 4.8936, 1.2500, -2.3936, 1.2500, -2.6064],
            [-2.6064, -1.2500, 0.1064, 1.2500, 4.8936, 1.2500, -2.3936, -1.2500],
            [-1.2500, -2.6064, -1.2500, -2.3936, 1.2500, 4.8936, 1.2500, 0.1064],
            [0.1064, -1.2500, -2.6064, 1.2500, -2.3936, 1.2500, 4.8936, -1.2500],
            [1.2500, -2.3936, 1.2500, -2.6064, -1.2500, 0.1064, -1.2500, 4.8936]
        ])

        exp_d = np.array([1.915, 1.915, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0])

        exp_v = np.array([
            [-1.0000, -0.1512, -0.3740, 0.4303, 1.0000, 0.3174, 1.0000, 0],
            [0.1741, 0.9923, 0.3444, -0.0109, -0.2360, 1.0000, 0, 1.0000],
            [1.0000, -0.1956, -1.0000, 1.0000, 0.1011, 0.3477, 1.0000, 0],
            [0.1741, -1.0000, -0.0325, 0.3071, 0.2360, -0.9180, 0, 1.0000],
            [-1.0000, -0.1512, 0.3740, -0.4303, -1.0000, -0.3174, 1.0000, 0],
            [0.1741, 0.9923, -0.3444, 0.0109, 0.2360, -1.0000, 0, 1.0000],
            [1.0000, -0.1956, 1.0000, -1.0000, -0.1011, -0.3477, 1.0000, 0],
            [0.1741, -1.0000, 0.0325, -0.3071, -0.2360, 0.9180, 0, 1.0000],
            [-4.5743, 0.1014, 0.6373, -0.0678, 6.0674, 6.3065, 0, 0],
            [-0.0000, 4.5566, -0.9331, 4.2620, 1.5730, 6.8677, 0, 0],
            [4.5743, -0.1014, -5.6226, 5.6294, -2.9213, 6.6091, 0, 0],
            [0.0000, -4.5566, 4.0522, -1.2997, -1.5730, -6.0479, 0, 0],
            [-4.5743, 0.1014, -0.6373, 0.0678, -6.0674, -6.3065, 0, 0],
            [0.0000, 4.5566, 0.9331, -4.2620, -1.5730, -6.8677, 0, 0],
            [4.5743, -0.1014, 5.6226, -5.6294, 2.9213, -6.6091, 0, 0],
            [- 0.0000, -4.5566, -4.0522, 1.2997, 1.5730, 6.0479, 0, 0]
        ])

        exp_M = np.array([
            [0.8954, 0.0851, 0.4380, -0.0000, 0.2287, 0.0851, 0.4380, 0.0000],
            [0.0851, 0.8954, -0.0000, 0.4380, 0.0851, 0.2287, -0.0000, 0.4380],
            [0.4380, 0.0000, 0.8954, -0.0851, 0.4380, -0.0000, 0.2287, -0.0851],
            [-0.0000, 0.4380, -0.0851, 0.8954, -0.0000, 0.4380, -0.0851, 0.2287],
            [0.2287, 0.0851, 0.4380, -0.0000, 0.8954, 0.0851, 0.4380, -0.0000],
            [0.0851, 0.2287, 0.0000, 0.4380, 0.0851, 0.8954, -0.0000, 0.4380],
            [0.4380, -0.0000, 0.2287, -0.0851, 0.4380, 0.0000, 0.8954, -0.0851],
            [0.0000, 0.4380, -0.0851, 0.2287, -0.0000, 0.4380, -0.0851, 0.8954]
        ])

        npt.assert_array_almost_equal(K, exp_K, decimal=4, err_msg=f"Mismatched 'K'")
        npt.assert_array_almost_equal(d, exp_d, decimal=4, err_msg=f"Mismatched 'd'")
        # TODO: check v - it is not equal to value from Matlab code
        # npt.assert_array_almost_equal(v, exp_v, decimal=4, err_msg=f"Mismatched 'v'")
        npt.assert_array_almost_equal(M, exp_M, decimal=4, err_msg=f"Mismatched 'M'")
        pass

